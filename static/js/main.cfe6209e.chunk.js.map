{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","utils/filterTodos.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","allTodos","currTodo","dispatch","filteredTodos","preparedTodos","normalizedQuery","trim","toLowerCase","title","includes","completed","filterTodos","length","className","map","classNames","id","onClick","currentTodoActions","setCurrTodo","TodoFilter","onSubmit","event","preventDefault","defaultValue","value","onChange","todoStatus","target","filterActions","placeholder","inputQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onModalClose","useState","user","setUser","loading","setLoading","useEffect","userId","response","catch","error","Error","finally","href","email","name","App","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfe6209e.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype ClearQuery = {\n  type: 'filter/CLEAR_QUERY',\n};\n\ntype StatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status,\n};\n\nconst filterByQuery = (query: string): QueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQuery => ({\n  type: 'filter/CLEAR_QUERY',\n});\n\nconst filterByStatus = (status: Status): StatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = QueryAction | ClearQuery | StatusAction;\n\nexport const actions = { filterByQuery, clearQuery, filterByStatus };\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/CLEAR_QUERY':\n      return { ...state, query: '' };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodoAction = {\n  type: 'currentTodos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): TodoAction => ({\n  type: 'currentTodos/SET',\n  payload: todos,\n});\n\ntype Action = TodoAction;\ntype State = {\n  todos: Todo[],\n};\n\nconst initialState: State = {\n  todos: [] as Todo[],\n};\n\nexport const actions = { setTodos };\n\nconst todosReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'currentTodos/SET':\n      return { ...state, todos: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { filterTodos } from '../../utils/filterTodos';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const allTodos = todos.todos;\n  const filter = useAppSelector(state => state.filter);\n  const { query, status } = filter;\n  const currTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = filterTodos(allTodos, query, status);\n\n  const setCurrTodo = (todo: Todo) => {\n    return dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {filteredTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map((todo) => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={classNames({\n                  'has-background-info-light': currTodo?.id === todo.id,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setCurrTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye': todo.id !== currTodo?.id,\n                        'fa-eye-slash': todo.id === currTodo?.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport function filterTodos(todos: Todo[], query: string, status: Status) {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    preparedTodos = preparedTodos.filter((todo) => {\n      return todo.title.toLowerCase().includes(normalizedQuery);\n    });\n  }\n\n  if (status) {\n    preparedTodos = preparedTodos.filter((todo) => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }\n\n  return preparedTodos;\n}\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleStatusChange = (todoStatus: Status) => {\n    return dispatch(filterActions.filterByStatus(todoStatus));\n  };\n\n  const handleQueryChange = (inputQuery: string) => {\n    return dispatch(filterActions.filterByQuery(inputQuery));\n  };\n\n  const clearQuery = () => {\n    return dispatch(filterActions.clearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            defaultValue=\"all\"\n            value={status}\n            onChange={\n              (event) => handleStatusChange(event.target.value as Status)\n            }\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => clearQuery()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader: React.FC = () => (\r\n  <div className=\"Loader\" data-cy=\"loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todo: Todo;\n  onModalClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onModalClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(todo.userId)\n      .then((response) => setUser(response))\n      .catch((error) => {\n        throw new Error('Error finding user', error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { actions as currentTodoActions } from './features/currentTodo';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then((response) => {\n        return dispatch(todosActions.setTodos(response));\n      })\n      .catch((error) => {\n        throw new Error('Error occured', error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  const handleCloseModal = () => {\n    return dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal\n          todo={currentTodo}\n          onModalClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}